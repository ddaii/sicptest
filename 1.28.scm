(define (square n)
  (* n n))
(define (miller-rabin-check x m)
  (define (check x sm)
    (if (and (not (= x 1))
             (not (= x (- m 1)))
             (= sm 1))
      0
      sm))
  (check x (remainder (square x) m)))
(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (miller-rabin-check (expmod base (/ exp 2) m) m))
        (else
          (remainder (* base (expmod base (- exp 1) m))
                     m))))
(define (miller-rabin-test n)
  (define (try-it a)
    (= (expmod a (- n 1) n) 1))
  (try-it (+ 1 (random (- n 1)))))
(define (miller-rabin-prime? n times)
  (cond ((= times 0) true)
        ((miller-rabin-test n) (miller-rabin-prime? n (- times 1)))
        (else false)))

